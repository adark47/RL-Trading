# ta_instruments.py

import sys
import math
import talib
import pandas as pd
from loguru import logger
from tabulate import tabulate
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ Loguru —Å —ç–º–æ–¥–∑–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
log_dir = "logs"
logger.remove()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{function}</cyan>:<yellow>{line}</yellow> - <level>{message}</level>",
    level="INFO",
    colorize=True
)
logger.add(
    f"{log_dir}/ta_instruments_preprocessing_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log",
    rotation="10 MB",
    retention="30 days",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {function}:{line} - {message}",
    level="DEBUG"
)

class TA_Instruments_Preprocessor:

    def calculate_hma(self, close: pd.Series, timeperiod: int) -> pd.Series:
        """–†–∞—Å—á–µ—Ç Hull Moving Average —á–µ—Ä–µ–∑ WMA, —Ç–∞–∫ –∫–∞–∫ –ø—Ä—è–º–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è HMA –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ TA-Lib"""
        self.logger.debug(f"–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º HMA —Å –ø–µ—Ä–∏–æ–¥–æ–º {timeperiod} üìê")

        # –§–æ—Ä–º—É–ª–∞ HMA: HMA = WMA(2*WMA(n/2) - WMA(n), sqrt(n))
        half_period = max(1, int(timeperiod / 2))
        sqrt_period = max(1, int(math.sqrt(timeperiod)))

        wma_half = talib.WMA(close, timeperiod=half_period)
        wma_full = talib.WMA(close, timeperiod=timeperiod)

        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É —Å —É—á–µ—Ç–æ–º NaN –∑–Ω–∞—á–µ–Ω–∏–π
        diff = 2 * wma_half - wma_full
        hma = talib.WMA(diff, timeperiod=sqrt_period)

        return hma

    @logger.catch
    def add_technical_indicators(self, df: pd.DataFrame, indicators=None) -> pd.DataFrame:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ DataFrame

        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:
        - Overlap Studies (–ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è)
        - Momentum Indicators (–∏–º–ø—É–ª—å—Å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã) [[3]]
        - Volume Indicators (–æ–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã) [[3]]
        - Volatility Indicators (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏) [[3]]

        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ indicators:
        * 'sma' - Simple Moving Average
        * 'ema' - Exponential Moving Average
        * 'wma' - Weighted Moving Average
        * 'rsi' - Relative Strength Index [[2]]
        * 'macd' - Moving Average Convergence Divergence [[2]]
        * 'bbands' - Bollinger Bands [[9]]
        * 'atr' - Average True Range
        * 'adx' - Average Directional Movement Index [[1]]
        * 'stoch' - Stochastic Oscillator
        * 'cci' - Commodity Channel Index
        * 'roc' - Rate of Change
        * 'hma' - Hull Moving Average (–∫–∞—Å—Ç–æ–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        * 'ad' - Chaikin A/D Line [[1]]
        * 'adosc' - Chaikin A/D Oscillator [[1]]

        –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        df = preprocessor.add_technical_indicators(df, indicators=['rsi', 'macd', 'hma'])

        :param df: DataFrame —Å —Ü–µ–Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–æ–∫ 'close', –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - 'high', 'low', 'volume')
        :param indicators: –°–ø–∏—Å–æ–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞. –ï—Å–ª–∏ None, –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã.
        :return: DataFrame —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        """
        self.logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {indicators or '–≤—Å–µ'} üìà")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ 'close'
        if 'close' not in df.columns:
            self.logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ 'close' –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ ‚ùå")
            raise ValueError("–ö–æ–ª–æ–Ω–∫–∞ 'close' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        if indicators is None:
            indicators = ['macd', 'rsi', 'bbands', 'hma', 'atr']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        original_index = df.index
        df = df.reset_index(drop=True)

        added_features = []

        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
        if 'macd' in indicators:
            self.logger.debug("–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º MACD (12,26,9) üìä")
            macd, macd_signal, macd_hist = talib.MACD(df['close'], fastperiod=12, slowperiod=26, signalperiod=9)
            df['macd'] = macd
            df['macd_signal'] = macd_signal
            df['macd_hist'] = macd_hist
            added_features.extend(['macd', 'macd_signal', 'macd_hist'])

        if 'rsi' in indicators:
            self.logger.debug("–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI (14) üìä")
            df['rsi'] = talib.RSI(df['close'], timeperiod=14)
            added_features.append('rsi')

        if 'bbands' in indicators:
            self.logger.debug("–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Bollinger Bands (20) üìä")
            upper, middle, lower = talib.BBANDS(df['close'], timeperiod=20)
            df['bb_upper'] = upper
            df['bb_mid'] = middle
            df['bb_lower'] = lower
            added_features.extend(['bb_upper', 'bb_mid', 'bb_lower'])

        if 'atr' in indicators:
            self.logger.debug("–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Average True Range (ATR) —Å –ø–µ—Ä–∏–æ–¥–æ–º 14 üìê")
            if 'high' in df.columns and 'low' in df.columns:
                df['atr'] = talib.ATR(df['high'], df['low'], df['close'], 14)
                added_features.append('atr')
            else:
                self.logger.warning("–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ ATR –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –∫–æ–ª–æ–Ω–∫–∏ 'high' –∏ 'low' ‚ö†Ô∏è")

        if 'adx' in indicators:
            self.logger.debug("–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Average Directional Movement Index (ADX) üìä")
            if 'high' in df.columns and 'low' in df.columns:
                df['adx'] = talib.ADX(df['high'], df['low'], df['close'], timeperiod=14)
                added_features.append('adx')
            else:
                self.logger.warning("–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ ADX –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –∫–æ–ª–æ–Ω–∫–∏ 'high' –∏ 'low' ‚ö†Ô∏è")

        if 'hma' in indicators:
            self.logger.debug("–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Hull Moving Average (HMA) —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏ 9 –∏ 21 üìê")
            df['hma_fast'] = self.calculate_hma(df['close'], 9)
            df['hma_slow'] = self.calculate_hma(df['close'], 21)
            added_features.extend(['hma_fast', 'hma_slow'])


        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏...

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        df.index = original_index

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ NaN –∑–Ω–∞—á–µ–Ω–∏–π
        initial_count = len(df)
        df.fillna(0, inplace=True)
        final_count = len(df)


        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ feature_columns —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        self.feature_columns += added_features

        self.logger.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(added_features)} —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤! üéØ")

        # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
        if not df.empty:
            self.logger.info("üìä –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö:")
            self.logger.info(f"\n{tabulate(df[added_features].head(5), showindex=True, headers='keys', tablefmt='psql')}")
            self.logger.info(f"\n{tabulate(df[added_features].tail(5), showindex=True, headers='keys', tablefmt='psql')}")

        return df
