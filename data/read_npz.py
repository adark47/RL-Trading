import numpy as np
import os
from termcolor import colored


def inspect_npz_file(file_path, max_rows=10, max_cols=5):
    """–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .npz —Ñ–∞–π–ª–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–æ–≤"""
    if not os.path.exists(file_path):
        print(colored(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}", "red"))
        return False

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±—ä–µ–∫—Ç–æ–≤
        data = np.load(file_path, allow_pickle=True)

        print(colored(f"\n{'=' * 50}", "blue"))
        print(colored(f"–§–∞–π–ª: {file_path}", "blue", attrs=["bold"]))
        print(colored(f"{'=' * 50}", "blue"))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ
        if len(data.files) == 0:
            print(colored("‚ö†Ô∏è  –§–∞–π–ª –ø—É—Å—Ç–æ–π, –º–∞—Å—Å–∏–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "yellow"))
            data.close()
            return True

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–∞—Å—Å–∏–≤ –≤ —Ñ–∞–π–ª–µ
        for key in data.files:
            array = data[key]
            shape = array.shape

            print(colored(f"\n–ú–∞—Å—Å–∏–≤: '{key}'", "green", attrs=["bold"]))
            print(colored(f"  ‚Ä¢ –§–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö: {shape}", "cyan"))
            print(colored(f"  ‚Ä¢ –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {array.dtype}", "cyan"))
            print(colored(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä: {array.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", "cyan"))

            # –°–ª—É—á–∞–π 1: –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            if array.size == 0:
                print(colored("  ‚Ä¢ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤", "yellow"))
                continue

            # –°–ª—É—á–∞–π 2: –û–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
            if array.ndim == 1:
                sample = array[:max_rows]
                print(colored(f"  ‚Ä¢ –ü–µ—Ä–≤—ã–µ {min(max_rows, len(sample))} —ç–ª–µ–º–µ–Ω—Ç–æ–≤:", "magenta"))
                print(f"    {sample}")

            # –°–ª—É—á–∞–π 3: –î–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ (–Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –¥–ª—è –¥–∞–Ω–Ω—ã—Ö)
            elif array.ndim == 2:
                rows = min(max_rows, shape[0])
                cols = min(max_cols, shape[1])

                print(colored(f"  ‚Ä¢ –ü–µ—Ä–≤—ã–µ {rows} —Å—Ç—Ä–æ–∫ x {cols} —Å—Ç–æ–ª–±—Ü–æ–≤:", "magenta"))

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                for i in range(rows):
                    row = array[i, :cols]
                    row_str = ", ".join([f"{x:.4f}" if isinstance(x, (float, np.floating)) else str(x) for x in row])
                    if shape[1] > max_cols:
                        row_str += f", ... (–∏ –µ—â–µ {shape[1] - max_cols} –∫–æ–ª–æ–Ω–æ–∫)"
                    print(f"    –°—Ç—Ä–æ–∫–∞ {i}: [{row_str}]")

                if rows < shape[0]:
                    print(colored(f"    ... –∏ –µ—â–µ {shape[0] - rows} —Å—Ç—Ä–æ–∫", "yellow"))

            # –°–ª—É—á–∞–π 4: –ú–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ (3D+)
            else:
                print(colored(f"  ‚Ä¢ –ú–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ ({array.ndim}D)", "magenta"))
                print(colored("  ‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–µ–∑ –ø–æ –ø–µ—Ä–≤–æ–º—É –∏–∑–º–µ—Ä–µ–Ω–∏—é:", "yellow"))

                # –°–æ–∑–¥–∞–µ–º —Å—Ä–µ–∑ –ø–µ—Ä–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                slice_obj = tuple([slice(0, min(2, array.shape[0]))] +
                                  [slice(None) for _ in range(1, array.ndim)])
                sample = array[slice_obj]

                print(colored(f"  ‚Ä¢ –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π):", "yellow"))
                print(f"    –§–æ—Ä–º–∞ —Å—Ä–µ–∑–∞: {sample.shape}")
                print(f"    –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {str(sample).replace(chr(10), ' ')}")

        data.close()
        return True

    except Exception as e:
        print(colored(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}", "red"))
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
    files_to_check = [
        'train_data.npz',
        'val_data.npz',
        'test_data.npz',
        'backtest_data.npz'
    ]

    print(colored("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö...", "cyan", attrs=["bold"]))
    print(colored("========================================", "cyan"))

    found_files = 0
    for file in files_to_check:
        if inspect_npz_file(file):
            found_files += 1

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(colored("\n\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:", "cyan", attrs=["bold"]))
    print(colored(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {found_files}/{len(files_to_check)}", "green"))
    print(colored(f"  ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files_to_check) - found_files}",
                  "yellow" if len(files_to_check) - found_files > 0 else "green"))

    if found_files > 0:
        print(colored("\nüí° –°–æ–≤–µ—Ç—ã –ø–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", "blue"))
        print(colored("  ‚Ä¢ 'X_*' –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ (—Ñ–∏—á–∏)", "cyan"))
        print(colored("  ‚Ä¢ 'y_*' –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ", "cyan"))
        print(colored("  ‚Ä¢ –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –ø–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —à–∞–≥–∏", "cyan"))
        print(colored("  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ np.load(file)['key'].shape –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º—ã", "cyan"))


if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        try:
            import termcolor
        except ImportError:
            print(colored("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ termcolor –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞...", "yellow"))
            os.system("pip install termcolor --quiet")

        main()
    except KeyboardInterrupt:
        print(colored("\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)", "yellow"))
    except Exception as e:
        print(colored(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", "red"))