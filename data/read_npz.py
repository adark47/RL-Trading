# data/read_npz.py

import numpy as np
import os
import sys
from loguru import logger
import tabulate

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ —Å —Ü–≤–µ—Ç–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
logger.remove()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
logger.add(sys.stderr,
           format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{message}</cyan>",
           colorize=True,
           level="INFO")


def inspect_npz_file(file_path, max_rows=10, max_cols=5, show_all_columns=False):
    """–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .npz —Ñ–∞–π–ª–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–æ–≤"""
    if not os.path.exists(file_path):
        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return False

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±—ä–µ–∫—Ç–æ–≤
        data = np.load(file_path, allow_pickle=True)

        logger.info(f"\n{'=' * 50}")
        logger.info(f"–§–∞–π–ª: {file_path}")
        logger.info(f"{'=' * 50}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ
        if len(data.files) == 0:
            logger.warning("‚ö†Ô∏è  –§–∞–π–ª –ø—É—Å—Ç–æ–π, –º–∞—Å—Å–∏–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            data.close()
            return True

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–∞—Å—Å–∏–≤ –≤ —Ñ–∞–π–ª–µ
        for key in data.files:
            array = data[key]
            shape = array.shape

            logger.success(f"\n–ú–∞—Å—Å–∏–≤: '{key}'")
            logger.info(f"  ‚Ä¢ –§–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö: {shape}")
            logger.info(f"  ‚Ä¢ –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {array.dtype}")
            logger.info(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä: {array.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

            # –°–ª—É—á–∞–π 1: –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            if array.size == 0:
                logger.warning("  ‚Ä¢ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤")
                continue

            # –°–ª—É—á–∞–π 2: –û–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
            if array.ndim == 1:
                sample = array[:max_rows]
                logger.info(f"  ‚Ä¢ –ü–µ—Ä–≤—ã–µ {min(max_rows, len(sample))} —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
                logger.info(f"    {sample}")

            # –°–ª—É—á–∞–π 3: –î–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ (–Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –¥–ª—è –¥–∞–Ω–Ω—ã—Ö)
            elif array.ndim == 2:
                rows = min(max_rows, shape[0])

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
                if show_all_columns:
                    cols = shape[1]
                    logger.info(f"  ‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö {cols} —Å—Ç–æ–ª–±—Ü–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º)")
                else:
                    cols = min(max_cols, shape[1])

                logger.info(f"  ‚Ä¢ –ü–µ—Ä–≤—ã–µ {rows} —Å—Ç—Ä–æ–∫ x {cols} —Å—Ç–æ–ª–±—Ü–æ–≤:")

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è tabulate
                sample = array[:rows, :cols]

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                formatted_data = []
                for i in range(rows):
                    row = []
                    for x in sample[i]:
                        if isinstance(x, (float, np.floating)):
                            row.append(f"{x:.4f}")
                        else:
                            row.append(str(x))
                    formatted_data.append(row)

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = [f"Col {i}" for i in range(cols)]

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
                max_col_width = 12  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                col_widths = [max_col_width] * cols

                # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π —à–∏—Ä–∏–Ω–æ–π —Å—Ç–æ–ª–±—Ü–æ–≤
                table = tabulate.tabulate(formatted_data,
                                          headers=headers,
                                          tablefmt="grid",
                                          stralign="right",
                                          maxcolwidths=col_widths)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ [[7]]
                logger.info(f"\n{table}")

                if not show_all_columns and rows < shape[0]:
                    logger.info(f"    ... –∏ –µ—â–µ {shape[0] - rows} —Å—Ç—Ä–æ–∫")
                if not show_all_columns and cols < shape[1]:
                    logger.warning(
                        f"    ‚ö†Ô∏è  –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ —Ç–æ–ª—å–∫–æ {cols} –∏–∑ {shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ show_all_columns=True –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤.")
                elif show_all_columns and shape[1] > 20:
                    logger.info(
                        f"    üí° –°–æ–≤–µ—Ç: –î–ª—è –æ—á–µ–Ω—å —à–∏—Ä–æ–∫–∏—Ö —Ç–∞–±–ª–∏—Ü –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ max_cols –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤")

            # –°–ª—É—á–∞–π 4: –ú–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ (3D+)
            else:
                logger.info(f"  ‚Ä¢ –ú–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ ({array.ndim}D)")
                logger.warning("  ‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–µ–∑ –ø–æ –ø–µ—Ä–≤–æ–º—É –∏–∑–º–µ—Ä–µ–Ω–∏—é:")

                # –°–æ–∑–¥–∞–µ–º —Å—Ä–µ–∑ –ø–µ—Ä–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                slice_obj = tuple([slice(0, min(2, array.shape[0]))] +
                                  [slice(None) for _ in range(1, array.ndim)])
                sample = array[slice_obj]

                logger.info(f"  ‚Ä¢ –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π):")
                logger.info(f"    –§–æ—Ä–º–∞ —Å—Ä–µ–∑–∞: {sample.shape}")
                logger.info(f"    –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {str(sample).replace(chr(10), ' ')}")

        data.close()
        return True

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
    logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
    logger.info("========================================")

    files_to_check = [
        'train_data.npz',
        'val_data.npz',
        'test_data.npz',
        'backtest_data.npz'
    ]

    found_files = 0
    for file in files_to_check:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        if inspect_npz_file(file, max_cols=15, show_all_columns=True):
            found_files += 1

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info("\n\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    if found_files > 0:
        logger.success(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {found_files}/{len(files_to_check)}")
    if len(files_to_check) - found_files > 0:
        logger.warning(f"  ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files_to_check) - found_files}")
    else:
        logger.success(f"  ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files_to_check) - found_files}")

    if found_files > 0:
        logger.info("\nüí° –°–æ–≤–µ—Ç—ã –ø–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:")
        logger.info("  ‚Ä¢ 'X_*' –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ (—Ñ–∏—á–∏)")
        logger.info("  ‚Ä¢ 'y_*' –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        logger.info("  ‚Ä¢ –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –ø–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —à–∞–≥–∏")
        logger.info("  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ np.load(file)['key'].shape –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º—ã")
        logger.info("  ‚Ä¢ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä show_all_columns=True")
        logger.info("  ‚Ä¢ –î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä maxcolwidths [[3]]")


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    try:
        import loguru
        import tabulate
    except ImportError:
        logger.warning("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ loguru –∏ tabulate...")
        os.system("pip install loguru tabulate --quiet")
        from loguru import logger
        import tabulate

    try:
        main()
    except KeyboardInterrupt:
        logger.warning("\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ")