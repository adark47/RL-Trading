# data/get_data_to_arcticDB.py

import requests
import pandas as pd
import datetime
import time
import sys
from loguru import logger
from tabulate import tabulate
import arcticdb as adb

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —ç–º–æ–¥–∂–∏
log_dir = "logs"
logger.remove()
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{function}</cyan>:<yellow>{line}</yellow> - <level>{message}</level>",
    level="INFO",
    colorize=True
)
logger.add(
    f"{log_dir}/get_data_to_arcticDB_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.log",
    rotation="10 MB",
    retention="30 days",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {function}:{line} - {message}",
    level="DEBUG"
)


def timeframe_to_interval(timeframe: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π Bybit API."""
    timeframe = timeframe.lower()
    mapping = {
        '1m': '1',
        '5m': '5',
        '15m': '15',
        '30m': '30',
        '1h': '60',
        '2h': '120',
        '4h': '240',
        '6h': '360',
        '12h': '720',
        '1d': 'D',
        '1w': 'W',
        '1mth': 'M'
    }

    if timeframe not in mapping:
        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1m")
        return '1'

    return mapping[timeframe]


def validate_parameters(category: str, symbol: str, timeframe: str, days: float):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
    valid_categories = ['spot', 'linear', 'inverse']
    if category not in valid_categories:
        raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ä—ã–Ω–∫–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {valid_categories}")

    if not symbol or not isinstance(symbol, str):
        raise ValueError("–°–∏–º–≤–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")

    if days <= 0:
        raise ValueError("–ü–µ—Ä–∏–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ timeframe_to_interval


def fetch_klines(category: str, symbol: str, timeframe: str = '1m', days: float = 1.0):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π —Å Bybit.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - category: 'spot' –¥–ª—è —Å–ø–æ—Ç–∞, 'linear' –¥–ª—è USDT —Ñ—å—é—á–µ—Ä—Å–æ–≤, 'inverse' –¥–ª—è BTC —Ñ—å—é—á–µ—Ä—Å–æ–≤
    - symbol: –Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTCUSDT' –¥–ª—è —Å–ø–æ—Ç–∞ –∏–ª–∏ 'BTCUSDT.P' –¥–ª—è –ø–µ—Ä–ø–µ—Ç—É–∞–ª —Ñ—å—é—á–µ—Ä—Å–æ–≤
    - timeframe: —Ç–∞–π–º—Ñ—Ä–µ–π–º —Å–≤–µ—á–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '1m')
    - days: –ø–µ—Ä–∏–æ–¥ –≤ –¥–Ω—è—Ö (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä–æ–±–Ω—ã–º, –Ω–∞–ø—Ä–∏–º–µ—Ä 0.5 –¥–ª—è 12 —á–∞—Å–æ–≤)

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: date, open, high, low, close, volume
    """
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    validate_parameters(category, symbol, timeframe, days)

    interval_str = timeframe_to_interval(timeframe)
    logger.info(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ: {symbol} ({category}), {timeframe}, {days} –¥–Ω–µ–π")

    # === –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ===
    end_datetime = datetime.datetime.now()
    start_datetime = end_datetime - datetime.timedelta(days=days)

    logger.debug(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥: —Å {start_datetime} –ø–æ {end_datetime} ({days} –¥–Ω–µ–π)")

    # === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Bybit –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ ===
    MAX_PERIOD_DAYS = 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    current_start = start_datetime
    all_data = []
    base_max_period = 50

    # –†–∞–∑–±–∏–≤–∞–µ–º –æ–±—â–∏–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ –ø–æ–¥–ø–µ—Ä–∏–æ–¥—ã
    while current_start < end_datetime:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–ø–µ—Ä–∏–æ–¥–∞
        period_end = min(current_start + datetime.timedelta(days=MAX_PERIOD_DAYS), end_datetime)

        logger.info(
            f"üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥: {current_start.strftime('%Y-%m-%d %H:%M')} - {period_end.strftime('%Y-%m-%d %H:%M')}")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–ø–µ—Ä–∏–æ–¥–∞
        start_time = int(current_start.timestamp() * 1000)
        end_time = int(period_end.timestamp() * 1000)

        # === –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ë–†–ê–ù–´ –í–°–ï –õ–ò–®–ù–ò–ï –ü–†–û–ë–ï–õ–´ –í URL ===
        url = "https://api.bybit.com/v5/market/kline"  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!

        current_end = end_time
        period_data = []
        max_attempts = 100
        attempts = 0
        period_retries = 0
        max_period_retries = 5

        while start_time < current_end and attempts < max_attempts:
            attempts += 1

            params = {
                'category': category,
                'symbol': symbol,
                'interval': interval_str,
                'start': start_time,
                'end': current_end,
                'limit': 1000
            }

            try:
                logger.debug(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {params}")
                response = requests.get(url, params=params)
                response.raise_for_status()
                data = response.json()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
                if data.get('retCode') != 0:
                    error_msg = data.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {error_msg} (–∫–æ–¥: {data.get('retCode')})")

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ rate limit
                    if data.get('retCode') == 10001 and "rate" in str(data.get('retMsg', '')).lower():
                        logger.warning("‚è≥ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...")
                        time.sleep(2)
                        continue

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –ø–µ—Ä–∏–æ–¥
                    if data.get('retCode') == 100027 or "period" in str(data.get('retMsg', '')).lower():
                        logger.warning(
                            f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫ ({MAX_PERIOD_DAYS} –¥–Ω–µ–π), —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–¥–ø–µ—Ä–∏–æ–¥–∞")
                        MAX_PERIOD_DAYS = max(1, MAX_PERIOD_DAYS // 2)
                        period_retries += 1

                        if period_retries > max_period_retries:
                            logger.error(
                                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ {max_period_retries} –ø–æ–ø—ã—Ç–æ–∫ —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞")
                            break

                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
                        break

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
                    break

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                if not isinstance(data, dict) or 'result' not in data or not isinstance(data['result'], dict):
                    logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API")
                    break

                result = data['result']
                if 'list' not in result or not isinstance(result['list'], list) or len(result['list']) == 0:
                    logger.info("‚ÑπÔ∏è –ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
                    break

                klines = result['list']

                # Bybit –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
                first_ts = int(klines[0][0])  # —Å–∞–º–∞—è —Å–≤–µ–∂–∞—è
                last_ts = int(klines[-1][0])  # —Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –ª–æ–≥–∞
                oldest_str = datetime.datetime.fromtimestamp(last_ts / 1000).strftime("%H:%M %d.%m.%Y")
                newest_str = datetime.datetime.fromtimestamp(first_ts / 1000).strftime("%H:%M %d.%m.%Y")

                period_data.extend(klines)

                # –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π —Å–≤–µ—á–∏
                current_end = last_ts - 1

                logger.info(
                    f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(klines)} —Å–≤–µ—á–µ–π ({oldest_str} - {newest_str}). –í—Å–µ–≥–æ –≤ –ø–µ—Ä–∏–æ–¥–µ: {len(period_data)}")

                # –°–æ–±–ª—é–¥–∞–µ–º rate limit
                time.sleep(0.1)

            except requests.exceptions.RequestException as e:
                logger.error(f"üì° –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
                logger.info("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...")
                time.sleep(1)
            except Exception as e:
                logger.exception(f"üö® –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                break

        # –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –±—ã–ª —É–º–µ–Ω—å—à–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        if period_retries > 0 and len(period_data) > 0:
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º ({MAX_PERIOD_DAYS} –¥–Ω–µ–π)")
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            MAX_PERIOD_DAYS = base_max_period
            period_retries = 0

        if period_data:
            all_data.extend(period_data)
            logger.success(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ {current_start.strftime('%Y-%m-%d')} - {period_end.strftime('%Y-%m-%d')}")
        else:
            logger.warning(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ {current_start.strftime('%Y-%m-%d')} - {period_end.strftime('%Y-%m-%d')}")

            # –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –±—ã–ª —É–º–µ–Ω—å—à–µ–Ω –¥–æ 1 –¥–Ω—è –∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
            if MAX_PERIOD_DAYS <= 1:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
                MAX_PERIOD_DAYS = base_max_period
                period_retries = 0

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–¥–ø–µ—Ä–∏–æ–¥—É
        current_start = period_end
        time.sleep(0.5)

    if not all_data:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π")
        return pd.DataFrame()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
    columns = ['date', 'open', 'high', 'low', 'close', 'volume', 'turnover']
    df = pd.DataFrame(all_data, columns=columns)

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    df = df[['date', 'open', 'high', 'low', 'close', 'volume']]

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º date –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    df['date'] = pd.to_datetime(df['date'].astype(int), unit='ms')

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    numeric_cols = ['open', 'high', 'low', 'close', 'volume']
    for col in numeric_cols:
        df[col] = pd.to_numeric(df[col], errors='coerce')
        # –ó–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ 0 –¥–ª—è –æ–±—ä–µ–º–∞, –¥–ª—è —Ü–µ–Ω –æ—Å—Ç–∞–≤–ª—è–µ–º NaN
        if col == 'volume':
            df[col] = df[col].fillna(0)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
    df = df.sort_values('date').reset_index(drop=True)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    if not df.empty:
        actual_days = (df['date'].max() - df['date'].min()).total_seconds() / (24 * 60 * 60)
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞ {actual_days:.2f} –¥–Ω–µ–π –∏–∑ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö {days} –¥–Ω–µ–π")
        logger.info(f"üìå –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö: —Å {df['date'].min()} –ø–æ {df['date'].max()}")
    else:
        logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")

    logger.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
    return df


def get_existing_data(library, symbol_name):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ ArcticDB, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å"""
    if library.has_symbol(symbol_name):
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol_name}")
        existing_data = library.read(symbol_name).data
        logger.info(
            f"üìå –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥: —Å {existing_data['date'].min()} –ø–æ {existing_data['date'].max()}")
        logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π: {len(existing_data)}")
        return existing_data
    return None


def save_to_arcticdb(library, symbol_name, new_data, existing_data=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ ArcticDB —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    if existing_data is not None and not existing_data.empty:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        last_date = existing_data['date'].max()
        logger.info(f"‚è≥ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å {last_date}")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –Ω–æ–≤–µ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ
        new_data = new_data[new_data['date'] > last_date]

        # === –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ArcticDB ===
        if not new_data.empty:
            new_data = new_data.reset_index(drop=True)
            logger.info(f"üì• –î–æ–±–∞–≤–ª—è–µ–º {len(new_data)} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
            library.append(symbol_name, new_data)
            logger.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(new_data)} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ {symbol_name}")
        else:
            logger.info("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Ç")
    else:
        # === –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ===
        if not new_data.empty:
            new_data = new_data.reset_index(drop=True)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –Ω–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(new_data)} –∑–∞–ø–∏—Å–µ–π –∫–∞–∫ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ {symbol_name}")
            library.write(symbol_name, new_data)
            logger.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {symbol_name}")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")


if __name__ == "__main__":
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    MARKET_TYPE = 'linear'  # 'spot', 'linear' (USDT —Ñ—å—é—á–µ—Ä—Å—ã) –∏–ª–∏ 'inverse' (BTC —Ñ—å—é—á–µ—Ä—Å—ã)
    SYMBOL = 'DOGEUSDT'  # –î–ª—è —Å–ø–æ—Ç–∞ –∏–ª–∏ 'BTCUSDT.P' –¥–ª—è –ø–µ—Ä–ø–µ—Ç—É–∞–ª —Ñ—å—é—á–µ—Ä—Å–æ–≤
    TIMEFRAME = '1m'  # –¢–∞–π–º—Ñ—Ä–µ–π–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–∏–Ω—É—Ç–∞)
    DAYS = 100.0  # –ü–µ—Ä–∏–æ–¥ –≤ –¥–Ω—è—Ö (–º–æ–∂–Ω–æ –¥—Ä–æ–±–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)

    logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Bybit")
    logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {MARKET_TYPE} —Ä—ã–Ω–æ–∫, {SYMBOL}, {TIMEFRAME}, {DAYS} –¥–Ω–µ–π")
    logger.warning(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: Bybit API –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (~70 –¥–Ω–µ–π –¥–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π). "
                   f"–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ –ø–æ–¥–ø–µ—Ä–∏–æ–¥—ã –ø–æ 50 –¥–Ω–µ–π —Å –≤–æ–∑–º–æ–∂–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π.")

    try:
        # === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ARCTICDB ===
        storage_path = "arcticdb_storage"
        logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ArcticDB —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {storage_path}")
        ac = adb.Arctic(f"lmdb://{storage_path}")

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        library_name = "bybit_market_data"
        if not ac.has_library(library_name):
            ac.create_library(library_name)
            logger.info(f"üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ ArcticDB: {library_name}")

        library = ac.get_library(library_name)
        logger.info(f"üóÑÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É ArcticDB: {library_name}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
        symbol_name = f"{SYMBOL}_{TIMEFRAME}_{MARKET_TYPE}"
        logger.info(f"üè∑Ô∏è –ò–º—è —Å–∏–º–≤–æ–ª–∞ –≤ ArcticDB: {symbol_name}")

        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        existing_data = get_existing_data(library, symbol_name)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å
        if existing_data is not None and not existing_data.empty:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            last_date = existing_data['date'].max()
            time_diff = datetime.datetime.now() - last_date
            days_to_fetch = max(0.1, time_diff.total_seconds() / (24 * 3600))  # –º–∏–Ω–∏–º—É–º 0.1 –¥–Ω—è (2.4 —á–∞—Å–∞)
            logger.info(f"üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ: {last_date}")
            logger.info(f"‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π {days_to_fetch:.2f} –¥–Ω–µ–π")
        else:
            days_to_fetch = DAYS
            logger.info(f"üì• –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ {days_to_fetch} –¥–Ω–µ–π (–ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = fetch_klines(MARKET_TYPE, SYMBOL, TIMEFRAME, days_to_fetch)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if not df.empty:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ ArcticDB —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            save_to_arcticdb(library, symbol_name, df, existing_data)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            updated_data = get_existing_data(library, symbol_name)
            if updated_data is not None and not updated_data.empty:
                logger.info(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {len(updated_data)}")
                logger.info(
                    f"üìå –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö: —Å {updated_data['date'].min()} –ø–æ {updated_data['date'].max()}")

                # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
                logger.info("üìä –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö:")
                logger.info(f"\n {tabulate(updated_data.head(5), showindex=True, headers='keys', tablefmt='psql')}")
                logger.info(f"\n {tabulate(updated_data.tail(5), showindex=True, headers='keys', tablefmt='psql')}")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

    except Exception as e:
        logger.exception(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ: {str(e)}")
        sys.exit(1)